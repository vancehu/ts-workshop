(window["webpackJsonpts-workshop"]=window["webpackJsonpts-workshop"]||[]).push([[1],{188:function(n,e,t){n.exports=t(349)},193:function(n,e,t){},194:function(n,e,t){},349:function(n,e,t){"use strict";t.r(e);var o=t(83),r=t.n(o),i=t(184),a=t.n(i),s=(t(193),t(186)),c=(t(194),t(185)),l=t.n(c),u=[{title:"Basic Syntax",code:"// basic Types\nconst isDone: boolean = true;\nconst age: number = 24;\nconst firstName: string = 'Alice';\n\n// incorrect type assigned\nconst year: number = '2019';\n\n// array and tuple\nconst firstNameList: string[] = ['Alice', 'Bob'];\nconst firstNameList2: Array<string> = ['Alice', 'Bob'];\nconst firstNameAndAgeTuple: [string, number] = ['Alice', 24];\n\n// null and undefined\nlet u: undefined = undefined;\nconst n: null = null;\nu = null; // behavior differently when 'strictNullChecks' is on\n\n// function\nfunction func1(arg1: string, arg2: number): boolean { return true; }\nconst func2: (arg1: string, arg2: number) => boolean = (arg1, arg2) => { return true; }\nconst func2Shorter = (arg1: string, arg2: number): boolean => { return true; }\n\n\n// never\nconst alwaysError: never = null"},{title:"Enums and constant string",code:"enum Status {\n  OK,\n  Error\n}\n\nenum Direction {\n  Up = 1,\n  Down,\n  Left,\n  Right,\n}\n\nenum ConfirmText {\n  Yes = 'YES',\n  No = 'NO'\n}\n"},{title:"Constant string",code:"let hello: 'hello' = 'hello';\nhello = 'world';\n\n// useful in restricting params of a function\nfunction isResponseYes(response: 'yes' | 'no'): boolean {\n  return response === 'yes';\n};\nisResponseYes('yes');\n"},{title:"Type alias and interface",code:"type StringAlias = string;\ntype StringOrBoolean = string | boolean;\ninterface Obj1 {\n  foo: string;\n  bar: number;\n}\n\ntype Obj2 = {\n  foo: string;\n  bar: number;\n}\n\ninterface Obj3 extends Obj1 {\n  baz?: boolean;\n  magic: () => void;\n}\n\nconst obj: Obj3 = {\n\n};\n"},{title:"Interface, Intersection & Union",code:"interface Bird {\n  fly: () => void;\n  layEggs: () => void;\n}\n      \ninterface Fish {\n  swim: () => void;\n  layEggs: () => void;\n}\n\nconst animalA: Bird | Fish = {\n\n}\n\nconst animalB: Bird & Fish = {\n\n}\n\ntype N = boolean & number;\n"},{title:"Class",code:'class Component<T> { props: any; constructor(props: any){} }\n// ignore code above\n\ninterface ComponentAProps {\n  name: string;\n}\n\nclass ComponentA extends Component<ComponentAProps> {\n  constructor(props: ComponentAProps) {\n    super(props);\n  }\n  \n  private wrongGreeting() {\n    return "Hello, " + this.props.name;\n  }\n\n  private greeting = () => {\n    return "Hello, " + this.props.name;\n  }\n\n}\n     \ninterface Named {\n  name: string;\n}\n\nclass Person {\n  name: string;\n}\n\nlet p: Named;\n// OK, because of structural typing\n// define what you need\np = new Person();'},{title:"Object Index Signatures",code:"type AnyStringDictionary = {\n  [index: string]: string;\n}\n      \ninterface Obj1 {\n  foo: string;\n};\n\nconst obj1: Obj1 = {\n  foo: 'hello',\n  bar: 'world'\n};\n\ninterface Obj2 extends Obj1 {\n  [index: string]: string;\n}\n\nconst obj2: Obj2 = {\n  foo: 'hello',\n  bar: 'world'\n};\n\ntype StringDictionary = Record<string, string>;\ntype Obj1Dictionary = Record<string, Obj1>;\n"},{title:'"keyof", "in", "[property]"',code:"interface FormValues {\n  firstName: string;\n  lastName: string;\n  age: number;\n  isMember: number;\n}\n\ntype AllowedFormFields = keyof FormValues;\n\ntype FormLabels = {\n    [P in keyof FormValues]: string;\n}\n\ntype FirstNameValue = FormValues['firstName'];\ntype AgeValue = FormValues['age'];\n\ntype FormValueAllowStringFormat = {\n  [P in keyof FormValues]: (FormValues[P] | string);\n}\n\n"},{title:"Utility Helpers",code:'interface Obj {\n  foo: string;\n  bar?: number;\n  readonly baz: boolean;\n}\n\ntype PartialObj = Partial<Obj> // { [P in keyof Obj1]?: Obj1 };\ntype RequiredObj = Required<Obj>; // { [P in keyof Obj1]-?: Obj1 };\n\ntype ReadonlyObj = Readonly<Obj>; // { readonly [P in keyof Obj1]: Obj1 };\n\ntype Foo = Pick<Obj, \'foo\'>;\n\ntype ObjectWithoutFoo = Omit<Obj, \'foo\'>;\n\ntype T0 = Exclude<"a" | "b" | "c", "a">;\ntype T1 = Extract<"a" | "b" | "c", "a" | "f">;\ntype T2 = NonNullable<string | number | undefined>;\n\n'},{title:"Generics",code:"type ReactNode = any;\n// ignore code above\nfunction badEcho(input: any): any {\n  return input;\n}\nconst echo1 = badEcho('Hello');\n\nfunction goodEcho<T>(input: T): T {\n  return input;\n}\nconst echo2 = goodEcho<string>('Hello');\n\nfunction okOrCancel<T extends 'OK' | 'Cancel'>(input: T): T {\n  return input;\n}\n\nconst echo3 = okOrCancel('Hello');\n\nclass MyError<T = 'string'> {}\nconst myError = new MyError(); \n\ninterface ListItemProps<T> {\n  items: T[];\n  itemRender: (item: T, index: number) => ReactNode;\n}"},{title:"Type Inference",code:"type ReactNode = object;\n// ignore code above\n\nfunction echo<T>(input: T): T {\n  return input;\n}\nconst echo1 = echo('Hello');\nlet echo2 = echo('Hello');\n\nfunction renderItems<T>(items: T[], renderItem: (item: T) => ReactNode): ReactNode { return; }\n\nrenderItems(['foo', 'bar'], str => {\n  return {};\n});\n\nrenderItems(['foo', 3], str => {\n  return {};\n});\n\n"},{title:"Type Inference: typeof",code:"const english = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  stop: 'Stop'\n}\n\ntype Translations = typeof english;\n\nconst klingon: Translations = {\n  ok: 'luq',\n  cancel: 'qIl',\n  stop: 'mev',\n  notValid: 'nah'\n}"},{title:"Type Inference - Advanced Case",code:"interface Store {\n  user: {\n    id: string;\n    name: string;\n    age: number;\n    isMemeber: boolean;\n  },\n  cart: {\n    id: string;\n    promoCode: string;\n    total: number;\n  }\n}\n\nfunction accessStoreValue<T extends keyof Store, U extends keyof Store[T]>(\n    group: T, key: U) {}\n\naccessStoreValue('cart', 'promoCode');\n"},{title:"Type Assertion / Guard",code:"interface Bird {\n  fly: () => void;\n  layEggs: () => void;\n}\n      \ninterface Fish {\n  swim: () => void;\n  layEggs: () => void;\n}\n\nlet pet: Bird | Fish;\n\npet.layEggs();\n(pet as Bird).fly();\nconst birdPet = (pet as Bird);\nbirdPet.fly();\n\nfunction isBird(x: Bird | Fish): x is Bird {\n  return !!(x as Bird).fly;\n} \n\nif (isBird(pet)) {\n  pet.fly();\n}"},{title:"Type Guard - Object Literal",code:"const obj1 = {\n  foo: 1,\n  bar: 2,\n  baz: '3'\n}\n\nconst obj2: Record<string, number> = {\n  foo: 1,\n  bar: 2,\n  baz: 3\n}\n\n// use a type guard function to do the trick!\nconst obj2Trick = (<T extends Record<string, number>>(obj: T): T => obj)({\n  foo: 1,\n  bar: 2,\n  baz: 3\n});"},{title:'Plz do not use "any"',code:"function toUpperCase(input: string): string {\n    return input.toUpperCase();\n}\n\nlet a: any = 3;\ntoUpperCase(a); // CRASH!\n\n// Things that can help: \n// 1. only type those needed in a code\n// 2. https://quicktype.io/typescript/\n// 3. use 'unknown' for uncertainty instead of 'any'\n\n\ninterface ServerResponse {\n    id: string;\n    name: string;\n    [index: string]: unknown;\n}\n\n"},{title:"FAQ Playground",code:"// TypeScript handbook is always your best friend! \n// https://www.typescriptlang.org/docs/handbook/basic-types.html"}],d=function(){var n=Object(o.useState)(0),e=Object(s.a)(n,2),t=e[0],i=e[1],a=u[t];return r.a.createElement("div",{className:"App"},r.a.createElement("h1",null,a.title),r.a.createElement("div",{dangerouslySetInnerHTML:{__html:a.body||""}}),r.a.createElement("div",{className:"App-editor"},r.a.createElement(l.a,{height:"600",width:"100%",language:"typescript",theme:"vs-light",options:{fontSize:21},onChange:function(n){return a.code=n},value:a.code})),r.a.createElement("div",{className:"App-button-group"},r.a.createElement("button",{className:"App-button",onClick:function(){return i(t-1)},disabled:0===t},"Previous"),r.a.createElement("span",null,t+1," / ",u.length),r.a.createElement("button",{className:"App-button",onClick:function(){return i(t+1)},disabled:t===u.length-1},"Next")))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));a.a.render(r.a.createElement(d,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(n){n.unregister()})}},[[188,2,3]]]);
//# sourceMappingURL=main.21a7bd57.chunk.js.map