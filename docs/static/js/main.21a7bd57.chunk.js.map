{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["pages","title","code","App","useState","pageIndex","setPageIndex","page","className","dangerouslySetInnerHTML","__html","body","height","width","language","theme","options","fontSize","onChange","value","onClick","disabled","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAIMA,EAIA,CACF,CACEC,MAAO,eACPC,KAAK,wyBA2BJ,CACDD,MAAO,4BACPC,KAAK,0JAiBP,CACED,MAAO,kBACPC,KAAK,0NAUJ,CACDD,MAAO,2BACPC,KAAK,4RAsBJ,CACDD,MAAO,kCACPC,KAAK,2PAqBJ,CACDD,MAAO,QACPC,KAAK,2lBAoCP,CACED,MAAO,0BACPC,KAAK,yYA0BP,CACED,MAAO,8BACPC,KAAK,qZAsBJ,CACDD,MAAO,kBACPC,KAAK,6gBAqBJ,CACDD,MAAO,WACPC,KAAK,ohBA2BP,CACED,MAAO,iBACPC,KAAK,2XAqBJ,CACDD,MAAO,yBACPC,KAAK,0NAeJ,CACDD,MAAO,iCACPC,KAAK,0VAmBJ,CACDD,MAAO,yBACPC,KAAK,sXAyBP,CACED,MAAO,8BACPC,KAAK,sSAmBP,CACED,MAAO,uBACPC,KAAK,gZAoBP,CACED,MAAO,iBACPC,KAAK,0HAoCIC,EA7BO,WAAO,IAAD,EACQC,mBAAS,GADjB,mBACnBC,EADmB,KACRC,EADQ,KAEpBC,EAAOP,EAAMK,GACnB,OACE,yBAAKG,UAAU,OACb,4BAAKD,EAAKN,OACV,yBAAKQ,wBAAyB,CAAEC,OAAQH,EAAKI,MAAQ,MACrD,yBAAKH,UAAU,cACb,kBAAC,IAAD,CACEI,OAAO,MACPC,MAAM,OACNC,SAAS,aACTC,MAAM,WACNC,QAAS,CACPC,SAAU,IAEZC,SAAU,SAAAhB,GAAI,OAAIK,EAAKL,KAAOA,GAC9BiB,MAAOZ,EAAKL,QAGhB,yBAAKM,UAAW,oBACd,4BAAQA,UAAW,aAAcY,QAAS,kBAAMd,EAAaD,EAAY,IAAIgB,SAAwB,IAAdhB,GAAvF,YACA,8BAAOA,EAAY,EAAnB,MAAyBL,EAAMsB,QAC/B,4BAAQd,UAAW,aAAcY,QAAS,kBAAMd,EAAaD,EAAY,IAAIgB,SAAUhB,IAAcL,EAAMsB,OAAS,GAApH,WCzZYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.21a7bd57.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport MonacoEditor from 'react-monaco-editor';\n\nconst pages: {\n  title: string;\n  body?: string;\n  code: string;\n}[] = [\n    {\n      title: 'Basic Syntax',\n      code:\n        `// basic Types\nconst isDone: boolean = true;\nconst age: number = 24;\nconst firstName: string = 'Alice';\n\n// incorrect type assigned\nconst year: number = '2019';\n\n// array and tuple\nconst firstNameList: string[] = ['Alice', 'Bob'];\nconst firstNameList2: Array<string> = ['Alice', 'Bob'];\nconst firstNameAndAgeTuple: [string, number] = ['Alice', 24];\n\n// null and undefined\nlet u: undefined = undefined;\nconst n: null = null;\nu = null; // behavior differently when 'strictNullChecks' is on\n\n// function\nfunction func1(arg1: string, arg2: number): boolean { return true; }\nconst func2: (arg1: string, arg2: number) => boolean = (arg1, arg2) => { return true; }\nconst func2Shorter = (arg1: string, arg2: number): boolean => { return true; }\n\n\n// never\nconst alwaysError: never = null`\n    }, {\n      title: 'Enums and constant string',\n      code:\n        `enum Status {\n  OK,\n  Error\n}\n\nenum Direction {\n  Up = 1,\n  Down,\n  Left,\n  Right,\n}\n\nenum ConfirmText {\n  Yes = 'YES',\n  No = 'NO'\n}\n`}, {\n      title: 'Constant string',\n      code:\n        `let hello: 'hello' = 'hello';\nhello = 'world';\n\n// useful in restricting params of a function\nfunction isResponseYes(response: 'yes' | 'no'): boolean {\n  return response === 'yes';\n};\nisResponseYes('yes');\n`\n    }, {\n      title: 'Type alias and interface',\n      code:\n        `type StringAlias = string;\ntype StringOrBoolean = string | boolean;\ninterface Obj1 {\n  foo: string;\n  bar: number;\n}\n\ntype Obj2 = {\n  foo: string;\n  bar: number;\n}\n\ninterface Obj3 extends Obj1 {\n  baz?: boolean;\n  magic: () => void;\n}\n\nconst obj: Obj3 = {\n\n};\n`\n    }, {\n      title: 'Interface, Intersection & Union',\n      code:\n        `interface Bird {\n  fly: () => void;\n  layEggs: () => void;\n}\n      \ninterface Fish {\n  swim: () => void;\n  layEggs: () => void;\n}\n\nconst animalA: Bird | Fish = {\n\n}\n\nconst animalB: Bird & Fish = {\n\n}\n\ntype N = boolean & number;\n`\n    }, {\n      title: 'Class',\n      code:\n        `class Component<T> { props: any; constructor(props: any){} }\n// ignore code above\n\ninterface ComponentAProps {\n  name: string;\n}\n\nclass ComponentA extends Component<ComponentAProps> {\n  constructor(props: ComponentAProps) {\n    super(props);\n  }\n  \n  private wrongGreeting() {\n    return \"Hello, \" + this.props.name;\n  }\n\n  private greeting = () => {\n    return \"Hello, \" + this.props.name;\n  }\n\n}\n     \ninterface Named {\n  name: string;\n}\n\nclass Person {\n  name: string;\n}\n\nlet p: Named;\n// OK, because of structural typing\n// define what you need\np = new Person();`\n    },\n    {\n      title: 'Object Index Signatures',\n      code:\n        `type AnyStringDictionary = {\n  [index: string]: string;\n}\n      \ninterface Obj1 {\n  foo: string;\n};\n\nconst obj1: Obj1 = {\n  foo: 'hello',\n  bar: 'world'\n};\n\ninterface Obj2 extends Obj1 {\n  [index: string]: string;\n}\n\nconst obj2: Obj2 = {\n  foo: 'hello',\n  bar: 'world'\n};\n\ntype StringDictionary = Record<string, string>;\ntype Obj1Dictionary = Record<string, Obj1>;\n`},\n    {\n      title: '\"keyof\", \"in\", \"[property]\"',\n      code:\n        `interface FormValues {\n  firstName: string;\n  lastName: string;\n  age: number;\n  isMember: number;\n}\n\ntype AllowedFormFields = keyof FormValues;\n\ntype FormLabels = {\n    [P in keyof FormValues]: string;\n}\n\ntype FirstNameValue = FormValues['firstName'];\ntype AgeValue = FormValues['age'];\n\ntype FormValueAllowStringFormat = {\n  [P in keyof FormValues]: (FormValues[P] | string);\n}\n\n`\n    }, {\n      title: 'Utility Helpers',\n      code:\n        `interface Obj {\n  foo: string;\n  bar?: number;\n  readonly baz: boolean;\n}\n\ntype PartialObj = Partial<Obj> // { [P in keyof Obj1]?: Obj1 };\ntype RequiredObj = Required<Obj>; // { [P in keyof Obj1]-?: Obj1 };\n\ntype ReadonlyObj = Readonly<Obj>; // { readonly [P in keyof Obj1]: Obj1 };\n\ntype Foo = Pick<Obj, 'foo'>;\n\ntype ObjectWithoutFoo = Omit<Obj, 'foo'>;\n\ntype T0 = Exclude<\"a\" | \"b\" | \"c\", \"a\">;\ntype T1 = Extract<\"a\" | \"b\" | \"c\", \"a\" | \"f\">;\ntype T2 = NonNullable<string | number | undefined>;\n\n`\n    }, {\n      title: 'Generics',\n      code:\n        `type ReactNode = any;\n// ignore code above\nfunction badEcho(input: any): any {\n  return input;\n}\nconst echo1 = badEcho('Hello');\n\nfunction goodEcho<T>(input: T): T {\n  return input;\n}\nconst echo2 = goodEcho<string>('Hello');\n\nfunction okOrCancel<T extends 'OK' | 'Cancel'>(input: T): T {\n  return input;\n}\n\nconst echo3 = okOrCancel('Hello');\n\nclass MyError<T = 'string'> {}\nconst myError = new MyError(); \n\ninterface ListItemProps<T> {\n  items: T[];\n  itemRender: (item: T, index: number) => ReactNode;\n}`\n    },\n    {\n      title: 'Type Inference',\n      code:\n        `type ReactNode = object;\n// ignore code above\n\nfunction echo<T>(input: T): T {\n  return input;\n}\nconst echo1 = echo('Hello');\nlet echo2 = echo('Hello');\n\nfunction renderItems<T>(items: T[], renderItem: (item: T) => ReactNode): ReactNode { return; }\n\nrenderItems(['foo', 'bar'], str => {\n  return {};\n});\n\nrenderItems(['foo', 3], str => {\n  return {};\n});\n\n`\n    }, {\n      title: 'Type Inference: typeof',\n      code:\n        `const english = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  stop: 'Stop'\n}\n\ntype Translations = typeof english;\n\nconst klingon: Translations = {\n  ok: 'luq',\n  cancel: 'qIl',\n  stop: 'mev',\n  notValid: 'nah'\n}`\n    }, {\n      title: 'Type Inference - Advanced Case',\n      code: `interface Store {\n  user: {\n    id: string;\n    name: string;\n    age: number;\n    isMemeber: boolean;\n  },\n  cart: {\n    id: string;\n    promoCode: string;\n    total: number;\n  }\n}\n\nfunction accessStoreValue<T extends keyof Store, U extends keyof Store[T]>(\n    group: T, key: U) {}\n\naccessStoreValue('cart', 'promoCode');\n`\n    }, {\n      title: 'Type Assertion / Guard',\n      code: `interface Bird {\n  fly: () => void;\n  layEggs: () => void;\n}\n      \ninterface Fish {\n  swim: () => void;\n  layEggs: () => void;\n}\n\nlet pet: Bird | Fish;\n\npet.layEggs();\n(pet as Bird).fly();\nconst birdPet = (pet as Bird);\nbirdPet.fly();\n\nfunction isBird(x: Bird | Fish): x is Bird {\n  return !!(x as Bird).fly;\n} \n\nif (isBird(pet)) {\n  pet.fly();\n}`\n    },\n    {\n      title: 'Type Guard - Object Literal',\n      code: `const obj1 = {\n  foo: 1,\n  bar: 2,\n  baz: '3'\n}\n\nconst obj2: Record<string, number> = {\n  foo: 1,\n  bar: 2,\n  baz: 3\n}\n\n// use a type guard function to do the trick!\nconst obj2Trick = (<T extends Record<string, number>>(obj: T): T => obj)({\n  foo: 1,\n  bar: 2,\n  baz: 3\n});`\n    },\n    {\n      title: 'Plz do not use \"any\"',\n      code: `function toUpperCase(input: string): string {\n    return input.toUpperCase();\n}\n\nlet a: any = 3;\ntoUpperCase(a); // CRASH!\n\n// Things that can help: \n// 1. only type those needed in a code\n// 2. https://quicktype.io/typescript/\n// 3. use 'unknown' for uncertainty instead of 'any'\n\n\ninterface ServerResponse {\n    id: string;\n    name: string;\n    [index: string]: unknown;\n}\n\n`},\n    {\n      title: 'FAQ Playground',\n      code: `// TypeScript handbook is always your best friend! \n// https://www.typescriptlang.org/docs/handbook/basic-types.html`\n    }\n\n  ]\n\n\nconst App: React.FC = () => {\n  const [pageIndex, setPageIndex] = useState(0);\n  const page = pages[pageIndex];\n  return (\n    <div className=\"App\">\n      <h1>{page.title}</h1>\n      <div dangerouslySetInnerHTML={{ __html: page.body || '' }} />\n      <div className=\"App-editor\">\n        <MonacoEditor\n          height=\"600\"\n          width='100%'\n          language=\"typescript\"\n          theme=\"vs-light\"\n          options={{\n            fontSize: 21\n          }}\n          onChange={code => page.code = code}\n          value={page.code}\n        />\n      </div>\n      <div className={'App-button-group'} >\n        <button className={'App-button'} onClick={() => setPageIndex(pageIndex - 1)} disabled={pageIndex === 0}>Previous</button>\n        <span>{pageIndex + 1} / {pages.length}</span>\n        <button className={'App-button'} onClick={() => setPageIndex(pageIndex + 1)} disabled={pageIndex === pages.length - 1}>Next</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}